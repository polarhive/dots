// https://github.com/YaLTeR/niri/wiki/Configuration:-Overview
input {
    keyboard {
        repeat-delay 300
        repeat-rate 40
        xkb {
            options "caps:escape"
        }

    }

    touchpad {
        tap
        accel-speed 0.85
    }

    workspace-auto-back-and-forth
    focus-follows-mouse max-scroll-amount="0%"
}

output "eDP-1" {
    scale 0.75
    transform "normal"
}

layout {
    gaps 5

    // When to center a column when changing focus, options are:
    // - "never", default behavior, focusing an off-screen column will keep at the left
    //   or right edge of the screen.
    // - "always", the focused column will always be centered.
    // - "on-overflow", focusing a column will center it if it doesn't fit
    //   together with the previously focused column.

    center-focused-column "never"

    // You can customize the widths that "switch-preset-column-width" (Mod+R) toggles between.
    preset-column-widths {
        proportion 0.33333
        proportion 0.5
        proportion 0.66667
    }

    // You can also customize the heights that "switch-preset-window-height" (Mod+Shift+R) toggles between.
    // preset-window-heights { }

    // You can change the default width of the new windows.
    default-column-width { proportion 0.5; }

    // You can change how the focus ring looks.
    focus-ring {
        off
    }

    // You can also add a border. It's similar to the focus ring, but always visible.
    border {
        // off

        width 2
        // active-color "#ffc87f"
        // inactive-color "#505050"

        active-gradient from="#ffbb66" to="#ffc880" angle=45 relative-to="workspace-view"
        inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }

    // Struts shrink the area occupied by windows, similarly to layer-shell panels.
    // You can think of them as a kind of outer gaps. They are set in logical pixels.
    // Left and right struts will cause the next window to the side to always be visible.
    // Top and bottom struts will simply add outer gaps in addition to the area occupied by
    // layer-shell panels and regular gaps.
    struts {
        // left 64
        // right 64
        // top 64
        // bottom 64
    }
}

// Add lines like this to spawn processes at startup.
prefer-no-csd
spawn-at-startup "obsidian"
spawn-at-startup "chromium"
// spawn-at-startup "xwayland-satellite"
// environment {
// DISPLAY ":0"
// }

// A ~ at the front will be expanded to the home directory.
screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"

// https://github.com/YaLTeR/niri/wiki/Configuration:-Animations
animations {
    slowdown 0.5
    // slowdown 0.5
}

// Open the Firefox picture-in-picture player as floating by default.
window-rule {
    // This app-id regular expression will work for both:
    // - host Firefox (app-id is "firefox")
    // - Flatpak Firefox (app-id is "org.mozilla.firefox")
    match app-id=r#"firefox$"# title="^Picture-in-Picture$"
    open-floating true
}

// Example: block out two password managers from screen capture.
// (This example rule is commented out with a "/-" in front.)
/-window-rule {
    match app-id=r#"^org\.keepassxc\.KeePassXC$"#
    match app-id=r#"^org\.gnome\.World\.Secrets$"#

    block-out-from "screen-capture"

    // Use this instead if you want them visible on third-party screenshot tools.
    // block-out-from "screencast"
}

// Example: enable rounded corners for all windows.
// (This example rule is commented out with a "/-" in front.)
window-rule {
    geometry-corner-radius 2
    clip-to-geometry true
}

binds {

    Mod+Return { spawn "kitty"; }
    Mod+D { spawn "wmenu-run"; }
    Mod+Alt+S { spawn "poweroff"; }
    Mod+Alt+D { spawn "reboot"; }
    Mod+Alt+E { spawn "thunar"; }
    Mod+Alt+B { spawn "fractal"; }
    Mod+Alt+M { spawn "thunderbird"; }
    Mod+Alt+O { spawn "obsidian"; }
    Mod+Alt+T { spawn "telegram-desktop"; }
    Mod+Alt+F { spawn "chromium"; }
    Mod+Alt+I { spawn "theme"; }
    Ctrl+Alt+Delete { spawn "swaylock"; }

    Alt+Shift+BracketLeft  allow-when-locked=true { spawn "brightnessctl" "set" "10%-"; }
    Alt+Shift+BracketRight allow-when-locked=true { spawn "brightnessctl" "set" "10%+"; }
    XF86MonBrightnessDown  allow-when-locked=true { spawn "brightnessctl" "set" "10%-"; }
    XF86MonBrightnessUp    allow-when-locked=true { spawn "brightnessctl" "set" "10%+"; }

    XF86AudioPrev          allow-when-locked=true { spawn "playerctl" "previous"; }
    XF86AudioPlay          allow-when-locked=true { spawn "playerctl" "play-pause"; }
    XF86AudioNext          allow-when-locked=true { spawn "playerctl" "next"; }

    Alt+Comma              allow-when-locked=true { spawn "playerctl" "previous"; }
    Alt+Period             allow-when-locked=true { spawn "playerctl" "play-pause"; }
    Alt+Slash              allow-when-locked=true { spawn "playerctl" "next"; }

    XF86AudioLowerVolume   allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"; }
    XF86AudioRaiseVolume   allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"; }
    Alt+bracketleft        allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"; }
    Alt+bracketright       allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"; }


    XF86AudioMicMute       allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }
    XF86AudioMute          allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }

    Mod+Q { close-window; }

    Mod+H     { focus-column-left; }
    // Mod+J     { focus-window-down; }
    // Mod+K     { focus-window-up; }
    Mod+L     { focus-column-right; }

    Mod+Ctrl+H     { move-column-left; }
   // Mod+Ctrl+J     { move-window-down; }
   // Mod+Ctrl+K     { move-window-up; }
    Mod+Ctrl+L     { move-column-right; }

    // Alternative commands that move across workspaces when reaching
    // the first or last window in a column.
    Mod+J     { focus-window-or-workspace-down; }
    Mod+K     { focus-window-or-workspace-up; }
    Mod+Ctrl+J     { move-window-down-or-to-workspace-down; }
    Mod+Ctrl+K     { move-window-up-or-to-workspace-up; }

    Mod+Home { focus-column-first; }
    Mod+End  { focus-column-last; }
    Mod+Ctrl+Home { move-column-to-first; }
    Mod+Ctrl+End  { move-column-to-last; }

    Mod+Shift+H     { focus-monitor-left; }
    Mod+Shift+J     { focus-monitor-down; }
    Mod+Shift+K     { focus-monitor-up; }
    Mod+Shift+L     { focus-monitor-right; }

    Mod+Shift+Ctrl+H     { move-column-to-monitor-left; }
    Mod+Shift+Ctrl+J     { move-column-to-monitor-down; }
    Mod+Shift+Ctrl+K     { move-column-to-monitor-up; }
    Mod+Shift+Ctrl+L     { move-column-to-monitor-right; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Shift+Ctrl+Left  { move-window-to-monitor-left; }
    // ...

    // And you can also move a whole workspace to another monitor:
    // Mod+Shift+Ctrl+Left  { move-workspace-to-monitor-left; }
    // ...

    Mod+U              { focus-workspace-down; }
    Mod+I              { focus-workspace-up; }
    Mod+Ctrl+U         { move-column-to-workspace-down; }
    Mod+Ctrl+I         { move-column-to-workspace-up; }
    Mod+Shift+U         { move-workspace-down; }
    Mod+Shift+I         { move-workspace-up; }

    // You can bind mouse wheel scroll ticks using the following syntax.
    // These binds will change direction based on the natural-scroll setting.
    //
    // To avoid scrolling through workspaces really fast, you can use
    // the cooldown-ms property. The bind will be rate-limited to this value.
    // You can set a cooldown on any bind, but it's most useful for the wheel.
    Mod+Shift+WheelScrollDown      cooldown-ms=150 { focus-workspace-down; }
    Mod+Shift+WheelScrollUp        cooldown-ms=150 { focus-workspace-up; }
    Mod+Ctrl+WheelScrollDown cooldown-ms=150 { move-column-to-workspace-down; }
    Mod+Ctrl+WheelScrollUp   cooldown-ms=150 { move-column-to-workspace-up; }

    // Usually scrolling up and down with Shift in applications results in
    // horizontal scrolling; these binds replicate that.
    Mod+WheelScrollDown      { focus-column-right; }
    Mod+WheelScrollUp        { focus-column-left; }
    Mod+Ctrl+Shift+WheelScrollDown { move-column-right; }
    Mod+Ctrl+Shift+WheelScrollUp   { move-column-left; }

    // Similarly, you can bind touchpad scroll "ticks".
    // Touchpad scrolling is continuous, so for these binds it is split into
    // discrete intervals.
    // These binds are also affected by touchpad's natural-scroll, so these
    // example binds are "inverted", since we have natural-scroll enabled for
    // touchpads by default.
    // Mod+TouchpadScrollDown { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02+"; }
    // Mod+TouchpadScrollUp   { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02-"; }

    // You can refer to workspaces by index. However, keep in mind that
    // niri is a dynamic workspace system, so these commands are kind of
    // "best effort". Trying to refer to a workspace index bigger than
    // the current workspace count will instead refer to the bottommost
    // (empty) workspace.
    //
    // For example, with 2 workspaces + 1 empty, indices 3, 4, 5 and so on
    // will all refer to the 3rd workspace.
    Mod+1 { focus-workspace 1; }
    Mod+2 { focus-workspace 2; }
    Mod+3 { focus-workspace 3; }
    Mod+4 { focus-workspace 4; }
    Mod+5 { focus-workspace 5; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace 7; }
    Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace 9; }
    Mod+Shift+1 { move-column-to-workspace 1; }
    Mod+Shift+2 { move-column-to-workspace 2; }
    Mod+Shift+3 { move-column-to-workspace 3; }
    Mod+Shift+4 { move-column-to-workspace 4; }
    Mod+Shift+5 { move-column-to-workspace 5; }
    Mod+Shift+6 { move-column-to-workspace 6; }
    Mod+Shift+7 { move-column-to-workspace 7; }
    Mod+Shift+8 { move-column-to-workspace 8; }
    Mod+Shift+9 { move-column-to-workspace 9; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Ctrl+1 { move-window-to-workspace 1; }

    // Switches focus between the current and the previous workspace.
    // Mod+Tab { focus-workspace-previous; }

    // The following binds move the focused window in and out of a column.
    // If the window is alone, they will consume it into the nearby column to the side.
    // If the window is already in a column, they will expel it out.
    // Mod+BracketLeft  { consume-or-expel-window-left; }
    // Mod+BracketRight { consume-or-expel-window-right; }

    // Consume one window from the right to the bottom of the focused column.
    // Mod+Comma  { consume-window-into-column; }
    // Expel the bottom window from the focused column to the right.
    // Mod+Period { expel-window-from-column; }

    Mod+R { switch-preset-column-width; }
    Mod+Shift+R { switch-preset-window-height; }
    Mod+Ctrl+R { reset-window-height; }
    Mod+C { center-column; }
    Mod+F { fullscreen-window; }
    Mod+Shift+F { maximize-column; }

    // Finer width adjustments.
    Mod+Minus { set-column-width "-10%"; }
    Mod+Equal { set-column-width "+10%"; }

    // Finer height adjustments when in column with other windows.
    Mod+Shift+Minus { set-window-height "-10%"; }
    Mod+Shift+Equal { set-window-height "+10%"; }

    // Move the focused window between the floating and the tiling layout.
    Mod+V       { toggle-window-floating; }
    Mod+Shift+V { switch-focus-between-floating-and-tiling; }

    // Screenshots 
    Print { screenshot-screen; }
    Ctrl+Print { screenshot-window; }
    Shift+Print { screenshot; }

    // The quit action will show a confirmation dialog to avoid accidental exits.
    Mod+Alt+A { quit; }
    Mod+A { power-off-monitors; }
}
